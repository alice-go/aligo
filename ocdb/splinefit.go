// DO NOT EDIT; automatically generated by root-gen-type

package ocdb

import (
	"reflect"

	"go-hep.org/x/hep/groot/rbase"
	"go-hep.org/x/hep/groot/rbytes"
	"go-hep.org/x/hep/groot/rcont"
	"go-hep.org/x/hep/groot/rdict"
	"go-hep.org/x/hep/groot/rmeta"
	"go-hep.org/x/hep/groot/root"
	"go-hep.org/x/hep/groot/rtypes"
)

type AliSplineFit struct {
	base0      rbase.Object       // base class
	fBDump     bool               // dump debug information flag
	fNmin      int32              // number of points per one knot in iteration 0
	fMinPoints int32              // minimum number of points to create AliSplineFit
	fSigma     float64            // locally estimated sigma
	fMaxDelta  float64            // maximal deviation of the spline fit
	fN0        int32              // number of knots in iteration 0
	fParams    *rcont.ClonesArray // object array of parameters in knots
	fCovars    *rcont.ClonesArray // object array of covariance in knots
	fIndex     []int32            // [fN0] index of point corresponding to knot
	fN         int32              // number of knots after compression
	fChi2      float64            // chi2 per degree of freedom
	fX         []float64          // [fN] - xknot value
	fY0        []float64          // [fN] - y value at X
	fY1        []float64          // [fN] - y derivative value at X
	fChi2I     []float64          // [fN] - chi2 on interval
}

func (*AliSplineFit) Class() string   { return "AliSplineFit" }
func (*AliSplineFit) RVersion() int16 { return 2 }

// MarshalROOT implements rbytes.Marshaler
func (o *AliSplineFit) MarshalROOT(w *rbytes.WBuffer) (int, error) {
	if w.Err() != nil {
		return 0, w.Err()
	}

	pos := w.WriteVersion(o.RVersion())

	o.base0.MarshalROOT(w)
	w.WriteBool(o.fBDump)
	w.WriteI32(o.fNmin)
	w.WriteI32(o.fMinPoints)
	w.WriteF64(o.fSigma)
	w.WriteF64(o.fMaxDelta)
	w.WriteI32(int32(o.fN0))
	w.WriteObjectAny(o.fParams) // obj-ptr
	w.WriteObjectAny(o.fCovars) // obj-ptr
	w.WriteI8(1)                // is-array
	w.WriteFastArrayI32(o.fIndex[:o.fN0])
	w.WriteI32(int32(o.fN))
	w.WriteF64(o.fChi2)
	w.WriteI8(1) // is-array
	w.WriteFastArrayF64(o.fX[:o.fN])
	w.WriteI8(1) // is-array
	w.WriteFastArrayF64(o.fY0[:o.fN])
	w.WriteI8(1) // is-array
	w.WriteFastArrayF64(o.fY1[:o.fN])
	w.WriteI8(1) // is-array
	w.WriteFastArrayF64(o.fChi2I[:o.fN])

	return w.SetByteCount(pos, o.Class())
}

// UnmarshalROOT implements rbytes.Unmarshaler
func (o *AliSplineFit) UnmarshalROOT(r *rbytes.RBuffer) error {
	if r.Err() != nil {
		return r.Err()
	}

	start := r.Pos()
	/*vers*/ _, pos, bcnt := r.ReadVersion(o.Class())

	o.base0.UnmarshalROOT(r)
	o.fBDump = r.ReadBool()
	o.fNmin = r.ReadI32()
	o.fMinPoints = r.ReadI32()
	o.fSigma = r.ReadF64()
	o.fMaxDelta = r.ReadF64()
	o.fN0 = r.ReadI32()
	{
		o.fParams = nil
		if oo := r.ReadObjectAny(); oo != nil { // obj-ptr
			o.fParams = oo.(*rcont.ClonesArray)
		}
	}
	{
		o.fCovars = nil
		if oo := r.ReadObjectAny(); oo != nil { // obj-ptr
			o.fCovars = oo.(*rcont.ClonesArray)
		}
	}
	_ = r.ReadI8() // is-array
	o.fIndex = r.ReadFastArrayI32(int(o.fN0))
	o.fN = r.ReadI32()
	o.fChi2 = r.ReadF64()
	_ = r.ReadI8() // is-array
	o.fX = r.ReadFastArrayF64(int(o.fN))
	_ = r.ReadI8() // is-array
	o.fY0 = r.ReadFastArrayF64(int(o.fN))
	_ = r.ReadI8() // is-array
	o.fY1 = r.ReadFastArrayF64(int(o.fN))
	_ = r.ReadI8() // is-array
	o.fChi2I = r.ReadFastArrayF64(int(o.fN))

	r.CheckByteCount(pos, bcnt, start, o.Class())
	return r.Err()
}

func init() {
	f := func() reflect.Value {
		var o AliSplineFit
		return reflect.ValueOf(&o)
	}
	rtypes.Factory.Add("AliSplineFit", f)
}

func init() {
	// Streamer for AliSplineFit.
	rdict.Streamers.Add(rdict.NewCxxStreamerInfo("AliSplineFit", 2, 0xe895e1cc, []rbytes.StreamerElement{
		rdict.NewStreamerBase(rdict.Element{
			Name:   *rbase.NewNamed("TObject", "Basic ROOT object"),
			Type:   rmeta.Base,
			Size:   0,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, -1877229523, 0, 0, 0},
			Offset: 0,
			EName:  "BASE",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New(), 1),
		&rdict.StreamerBasicType{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fBDump", "dump debug information flag"),
			Type:   rmeta.Bool,
			Size:   1,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "Bool_t",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		&rdict.StreamerBasicType{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fNmin", "number of points per one knot in iteration 0"),
			Type:   rmeta.Int,
			Size:   4,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "Int_t",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		&rdict.StreamerBasicType{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fMinPoints", "minimum number of points to create AliSplineFit"),
			Type:   rmeta.Int,
			Size:   4,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "Int_t",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		&rdict.StreamerBasicType{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fSigma", "locally estimated sigma"),
			Type:   rmeta.Double,
			Size:   8,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "Double_t",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		&rdict.StreamerBasicType{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fMaxDelta", "maximal deviation of the spline fit"),
			Type:   rmeta.Double,
			Size:   8,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "Double_t",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		&rdict.StreamerBasicType{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fN0", "number of knots in iteration 0"),
			Type:   rmeta.Counter,
			Size:   4,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "Int_t",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		&rdict.StreamerObjectPointer{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fParams", "object array of parameters in knots"),
			Type:   rmeta.ObjectP,
			Size:   8,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "TClonesArray*",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		&rdict.StreamerObjectPointer{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fCovars", "object array of covariance in knots"),
			Type:   rmeta.ObjectP,
			Size:   8,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "TClonesArray*",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		rdict.NewStreamerBasicPointer(rdict.Element{
			Name:   *rbase.NewNamed("fIndex", "[fN0] index of point corresponding to knot"),
			Type:   43,
			Size:   4,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "Int_t*",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New(), 2, "fN0", "AliSplineFit"),
		&rdict.StreamerBasicType{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fN", "number of knots after compression"),
			Type:   rmeta.Counter,
			Size:   4,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "Int_t",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		&rdict.StreamerBasicType{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fChi2", "chi2 per degree of freedom"),
			Type:   rmeta.Double,
			Size:   8,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "Double_t",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		rdict.NewStreamerBasicPointer(rdict.Element{
			Name:   *rbase.NewNamed("fX", "[fN] - xknot value"),
			Type:   48,
			Size:   8,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "Double_t*",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New(), 2, "fN", "AliSplineFit"),
		rdict.NewStreamerBasicPointer(rdict.Element{
			Name:   *rbase.NewNamed("fY0", "[fN] - y value at X"),
			Type:   48,
			Size:   8,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "Double_t*",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New(), 2, "fN", "AliSplineFit"),
		rdict.NewStreamerBasicPointer(rdict.Element{
			Name:   *rbase.NewNamed("fY1", "[fN] - y derivative value at X"),
			Type:   48,
			Size:   8,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "Double_t*",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New(), 2, "fN", "AliSplineFit"),
		rdict.NewStreamerBasicPointer(rdict.Element{
			Name:   *rbase.NewNamed("fChi2I", "[fN] - chi2 on interval"),
			Type:   48,
			Size:   8,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "Double_t*",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New(), 2, "fN", "AliSplineFit"),
	}))
}

var (
	_ root.Object        = (*AliSplineFit)(nil)
	_ rbytes.RVersioner  = (*AliSplineFit)(nil)
	_ rbytes.Marshaler   = (*AliSplineFit)(nil)
	_ rbytes.Unmarshaler = (*AliSplineFit)(nil)
)
