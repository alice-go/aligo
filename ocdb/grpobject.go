// DO NOT EDIT; automatically generated by root-gen-type

package ocdb

import (
	"reflect"

	"go-hep.org/x/hep/groot/rbase"
	"go-hep.org/x/hep/groot/rbytes"
	"go-hep.org/x/hep/groot/rcont"
	"go-hep.org/x/hep/groot/rdict"
	"go-hep.org/x/hep/groot/rmeta"
	"go-hep.org/x/hep/groot/root"
	"go-hep.org/x/hep/groot/rtypes"
)

type AliGRPObject struct {
	base0                  rbase.Object    // base class
	fPoints                int32           // number of statistical quantities to be stored
	fDimension             int32           // dimension of Hall Probes array
	fTimeStart             int64           // DAQ_time_start entry from DAQ logbook
	fTimeEnd               int64           // DAQ_time_end entry from DAQ logbook
	fBeamEnergy            float32         // beamEnergy entry from DAQ logbook
	fBeamType              string          // beamType entry from DAQ logbook
	fHLTMode               int8            // HLT mode
	fNumberOfDetectors     int8            // numberOfDetectors entry from DAQ logbook
	fDetectorMask          uint32          // detectorMask entry from DAQ logbook
	fLHCPeriod             string          // LHCperiod entry from DAQ logbook
	fRunType               string          // RunType entry from DAQ logbook
	fLHCState              string          // LHCState entry from DCS DB
	fL3Polarity            int8            // L3Polarity entry from DCS DB
	fDipolePolarity        int8            // DipolePolarity entry from DCS DB
	fL3Current             []float32       // [fPoints]
	fDipoleCurrent         []float32       // [fPoints]
	fCavernTemperature     []float32       // [fPoints]
	fCavernAtmosPressure   *AliDCSSensor   // CavernAtmosPressure entry from DCS DB
	fCavernAtmosPressure2  *AliDCSSensor   // CavernAtmosPressure2 entry from DCS DB
	fSurfaceAtmosPressure  *AliDCSSensor   // SurfaceAtmosPressure entry from DCS DB
	fHallProbes            []float32       // [fDimension]
	fMachineMode           string          // Machine Mode from LHC
	fLHCStateArray         *rcont.ObjArray // Array of values for the LHC State
	fMachineModeArray      *rcont.ObjArray // Array of values for the LHC State
	fQATrigClasses         *rcont.ObjArray // RS: Array of trigger class to watch in QA
	fQACloningRequest      *rcont.ObjArray // RS: Array of cloning requests for QA histos
	fMaxTimeLHCValidity    float64         // time until which the LHC Data Machine Mode and Beam Mode didn't change
	fSeparateBeamType      string          // separate beam Types from LHC
	fNFalseDataQualityFlag int32           // number of times the data quality flag turned to FALSE
	fFalseDataQualityFlag  *rcont.ArrayD   // array of starts (even positions) and ends (odd poistions) of the periods
	fBeamTypeFromLHC       string          // string containing the information about the beam types AS SENT BY LHC (in the form "beam1-beam2")
}

func (*AliGRPObject) Class() string   { return "AliGRPObject" }
func (*AliGRPObject) RVersion() int16 { return 11 }

// MarshalROOT implements rbytes.Marshaler
func (o *AliGRPObject) MarshalROOT(w *rbytes.WBuffer) (int, error) {
	if w.Err() != nil {
		return 0, w.Err()
	}

	pos := w.WriteVersion(o.RVersion())

	o.base0.MarshalROOT(w)
	w.WriteI32(int32(o.fPoints))
	w.WriteI32(int32(o.fDimension))
	w.WriteI64(o.fTimeStart)
	w.WriteI64(o.fTimeEnd)
	w.WriteF32(o.fBeamEnergy)
	w.WriteString(o.fBeamType)
	w.WriteI8(o.fHLTMode)
	w.WriteI8(o.fNumberOfDetectors)
	w.WriteU32(o.fDetectorMask)
	w.WriteString(o.fLHCPeriod)
	w.WriteString(o.fRunType)
	w.WriteString(o.fLHCState)
	w.WriteI8(o.fL3Polarity)
	w.WriteI8(o.fDipolePolarity)
	w.WriteI8(1) // is-array
	w.WriteFastArrayF32(o.fL3Current[:o.fPoints])
	w.WriteI8(1) // is-array
	w.WriteFastArrayF32(o.fDipoleCurrent[:o.fPoints])
	w.WriteI8(1) // is-array
	w.WriteFastArrayF32(o.fCavernTemperature[:o.fPoints])
	w.WriteObjectAny(o.fCavernAtmosPressure)  // obj-ptr
	w.WriteObjectAny(o.fCavernAtmosPressure2) // obj-ptr
	w.WriteObjectAny(o.fSurfaceAtmosPressure) // obj-ptr
	w.WriteI8(1)                              // is-array
	w.WriteFastArrayF32(o.fHallProbes[:o.fDimension])
	w.WriteString(o.fMachineMode)
	w.WriteObjectAny(o.fLHCStateArray)    // obj-ptr
	w.WriteObjectAny(o.fMachineModeArray) // obj-ptr
	w.WriteObjectAny(o.fQATrigClasses)    // obj-ptr
	w.WriteObjectAny(o.fQACloningRequest) // obj-ptr
	w.WriteF64(o.fMaxTimeLHCValidity)
	w.WriteString(o.fSeparateBeamType)
	w.WriteI32(o.fNFalseDataQualityFlag)
	w.WriteObjectAny(o.fFalseDataQualityFlag) // obj-any-ptr
	w.WriteString(o.fBeamTypeFromLHC)

	return w.SetByteCount(pos, o.Class())
}

// UnmarshalROOT implements rbytes.Unmarshaler
func (o *AliGRPObject) UnmarshalROOT(r *rbytes.RBuffer) error {
	if r.Err() != nil {
		return r.Err()
	}

	start := r.Pos()
	/*vers*/ _, pos, bcnt := r.ReadVersion(o.Class())

	o.base0.UnmarshalROOT(r)
	o.fPoints = r.ReadI32()
	o.fDimension = r.ReadI32()
	o.fTimeStart = r.ReadI64()
	o.fTimeEnd = r.ReadI64()
	o.fBeamEnergy = r.ReadF32()
	o.fBeamType = r.ReadString()
	o.fHLTMode = r.ReadI8()
	o.fNumberOfDetectors = r.ReadI8()
	o.fDetectorMask = r.ReadU32()
	o.fLHCPeriod = r.ReadString()
	o.fRunType = r.ReadString()
	o.fLHCState = r.ReadString()
	o.fL3Polarity = r.ReadI8()
	o.fDipolePolarity = r.ReadI8()
	_ = r.ReadI8() // is-array
	o.fL3Current = r.ReadFastArrayF32(int(o.fPoints))
	_ = r.ReadI8() // is-array
	o.fDipoleCurrent = r.ReadFastArrayF32(int(o.fPoints))
	_ = r.ReadI8() // is-array
	o.fCavernTemperature = r.ReadFastArrayF32(int(o.fPoints))
	{
		o.fCavernAtmosPressure = nil
		if oo := r.ReadObjectAny(); oo != nil { // obj-ptr
			o.fCavernAtmosPressure = oo.(*AliDCSSensor)
		}
	}
	{
		o.fCavernAtmosPressure2 = nil
		if oo := r.ReadObjectAny(); oo != nil { // obj-ptr
			o.fCavernAtmosPressure2 = oo.(*AliDCSSensor)
		}
	}
	{
		o.fSurfaceAtmosPressure = nil
		if oo := r.ReadObjectAny(); oo != nil { // obj-ptr
			o.fSurfaceAtmosPressure = oo.(*AliDCSSensor)
		}
	}
	_ = r.ReadI8() // is-array
	o.fHallProbes = r.ReadFastArrayF32(int(o.fDimension))
	o.fMachineMode = r.ReadString()
	{
		o.fLHCStateArray = nil
		if oo := r.ReadObjectAny(); oo != nil { // obj-ptr
			o.fLHCStateArray = oo.(*rcont.ObjArray)
		}
	}
	{
		o.fMachineModeArray = nil
		if oo := r.ReadObjectAny(); oo != nil { // obj-ptr
			o.fMachineModeArray = oo.(*rcont.ObjArray)
		}
	}
	{
		o.fQATrigClasses = nil
		if oo := r.ReadObjectAny(); oo != nil { // obj-ptr
			o.fQATrigClasses = oo.(*rcont.ObjArray)
		}
	}
	{
		o.fQACloningRequest = nil
		if oo := r.ReadObjectAny(); oo != nil { // obj-ptr
			o.fQACloningRequest = oo.(*rcont.ObjArray)
		}
	}
	o.fMaxTimeLHCValidity = r.ReadF64()
	o.fSeparateBeamType = r.ReadString()
	o.fNFalseDataQualityFlag = r.ReadI32()
	{
		o.fFalseDataQualityFlag = nil
		if oo := r.ReadObjectAny(); oo != nil { // obj-any-ptr
			o.fFalseDataQualityFlag = oo.(*rcont.ArrayD)
		}
	}
	o.fBeamTypeFromLHC = r.ReadString()

	r.CheckByteCount(pos, bcnt, start, o.Class())
	return r.Err()
}

func init() {
	f := func() reflect.Value {
		var o AliGRPObject
		return reflect.ValueOf(&o)
	}
	rtypes.Factory.Add("AliGRPObject", f)
}

func init() {
	// Streamer for AliGRPObject.
	rdict.Streamers.Add(rdict.NewCxxStreamerInfo("AliGRPObject", 11, 0xc718fe88, []rbytes.StreamerElement{
		rdict.NewStreamerBase(rdict.Element{
			Name:   *rbase.NewNamed("TObject", "Basic ROOT object"),
			Type:   rmeta.Base,
			Size:   0,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, -1877229523, 0, 0, 0},
			Offset: 0,
			EName:  "BASE",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New(), 1),
		&rdict.StreamerBasicType{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fPoints", "number of statistical quantities to be stored"),
			Type:   rmeta.Counter,
			Size:   4,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "Int_t",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		&rdict.StreamerBasicType{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fDimension", "dimension of Hall Probes array"),
			Type:   rmeta.Counter,
			Size:   4,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "Int_t",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		&rdict.StreamerBasicType{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fTimeStart", "DAQ_time_start entry from DAQ logbook"),
			Type:   rmeta.Long,
			Size:   8,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "long",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		&rdict.StreamerBasicType{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fTimeEnd", "DAQ_time_end entry from DAQ logbook"),
			Type:   rmeta.Long,
			Size:   8,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "long",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		&rdict.StreamerBasicType{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fBeamEnergy", "beamEnergy entry from DAQ logbook"),
			Type:   rmeta.Float,
			Size:   4,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "Float_t",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		&rdict.StreamerString{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fBeamType", "beamType entry from DAQ logbook"),
			Type:   rmeta.TString,
			Size:   24,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "TString",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		&rdict.StreamerBasicType{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fHLTMode", "HLT mode"),
			Type:   rmeta.Char,
			Size:   1,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "Char_t",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		&rdict.StreamerBasicType{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fNumberOfDetectors", "numberOfDetectors entry from DAQ logbook"),
			Type:   rmeta.Char,
			Size:   1,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "Char_t",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		&rdict.StreamerBasicType{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fDetectorMask", "detectorMask entry from DAQ logbook"),
			Type:   rmeta.UInt,
			Size:   4,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "UInt_t",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		&rdict.StreamerString{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fLHCPeriod", "LHCperiod entry from DAQ logbook "),
			Type:   rmeta.TString,
			Size:   24,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "TString",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		&rdict.StreamerString{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fRunType", "RunType entry from DAQ logbook "),
			Type:   rmeta.TString,
			Size:   24,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "TString",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		&rdict.StreamerString{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fLHCState", "LHCState entry from DCS DB"),
			Type:   rmeta.TString,
			Size:   24,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "TString",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		&rdict.StreamerBasicType{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fL3Polarity", "L3Polarity entry from DCS DB"),
			Type:   rmeta.Char,
			Size:   1,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "Char_t",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		&rdict.StreamerBasicType{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fDipolePolarity", "DipolePolarity entry from DCS DB \t                                  "),
			Type:   rmeta.Char,
			Size:   1,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "Char_t",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		rdict.NewStreamerBasicPointer(rdict.Element{
			Name:   *rbase.NewNamed("fL3Current", "[fPoints]"),
			Type:   45,
			Size:   4,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "Float_t*",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New(), 11, "fPoints", "AliGRPObject"),
		rdict.NewStreamerBasicPointer(rdict.Element{
			Name:   *rbase.NewNamed("fDipoleCurrent", "[fPoints]"),
			Type:   45,
			Size:   4,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "Float_t*",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New(), 11, "fPoints", "AliGRPObject"),
		rdict.NewStreamerBasicPointer(rdict.Element{
			Name:   *rbase.NewNamed("fCavernTemperature", "[fPoints]"),
			Type:   45,
			Size:   4,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "Float_t*",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New(), 11, "fPoints", "AliGRPObject"),
		&rdict.StreamerObjectPointer{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fCavernAtmosPressure", "CavernAtmosPressure entry from DCS DB"),
			Type:   rmeta.ObjectP,
			Size:   8,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "AliDCSSensor*",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		&rdict.StreamerObjectPointer{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fCavernAtmosPressure2", "CavernAtmosPressure2 entry from DCS DB"),
			Type:   rmeta.ObjectP,
			Size:   8,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "AliDCSSensor*",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		&rdict.StreamerObjectPointer{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fSurfaceAtmosPressure", "SurfaceAtmosPressure entry from DCS DB"),
			Type:   rmeta.ObjectP,
			Size:   8,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "AliDCSSensor*",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		rdict.NewStreamerBasicPointer(rdict.Element{
			Name:   *rbase.NewNamed("fHallProbes", "[fDimension] "),
			Type:   45,
			Size:   4,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "Float_t*",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New(), 11, "fDimension", "AliGRPObject"),
		&rdict.StreamerString{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fMachineMode", "Machine Mode from LHC"),
			Type:   rmeta.TString,
			Size:   24,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "TString",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		&rdict.StreamerObjectPointer{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fLHCStateArray", "Array of values for the LHC State"),
			Type:   rmeta.ObjectP,
			Size:   8,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "TObjArray*",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		&rdict.StreamerObjectPointer{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fMachineModeArray", "Array of values for the LHC State"),
			Type:   rmeta.ObjectP,
			Size:   8,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "TObjArray*",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		&rdict.StreamerObjectPointer{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fQATrigClasses", "RS: Array of trigger class to watch in QA"),
			Type:   rmeta.ObjectP,
			Size:   8,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "TObjArray*",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		&rdict.StreamerObjectPointer{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fQACloningRequest", "RS: Array of cloning requests for QA histos"),
			Type:   rmeta.ObjectP,
			Size:   8,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "TObjArray*",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		&rdict.StreamerBasicType{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fMaxTimeLHCValidity", "time until which the LHC Data Machine Mode and Beam Mode didn't change "),
			Type:   rmeta.Double,
			Size:   8,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "Double_t",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		&rdict.StreamerString{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fSeparateBeamType", "separate beam Types from LHC"),
			Type:   rmeta.Enum(85),
			Size:   48,
			ArrLen: 2,
			ArrDim: 1,
			MaxIdx: [5]int32{2, 0, 0, 0, 0},
			Offset: 0,
			EName:  "TString",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		&rdict.StreamerBasicType{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fNFalseDataQualityFlag", "number of times the data quality flag turned to FALSE"),
			Type:   rmeta.Int,
			Size:   4,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "Int_t",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		&rdict.StreamerObjectAnyPointer{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fFalseDataQualityFlag", "array of starts (even positions) and ends (odd poistions) of the periods"),
			Type:   rmeta.AnyP,
			Size:   8,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "TArrayD*",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		&rdict.StreamerString{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fBeamTypeFromLHC", "string containing the information about the beam types AS SENT BY LHC (in the form \"beam1-beam2\")"),
			Type:   rmeta.TString,
			Size:   24,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "TString",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
	}))
}

var (
	_ root.Object        = (*AliGRPObject)(nil)
	_ rbytes.RVersioner  = (*AliGRPObject)(nil)
	_ rbytes.Marshaler   = (*AliGRPObject)(nil)
	_ rbytes.Unmarshaler = (*AliGRPObject)(nil)
)
