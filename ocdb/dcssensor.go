// DO NOT EDIT; automatically generated by root-gen-type

package ocdb

import (
	"reflect"

	"go-hep.org/x/hep/groot/rbase"
	"go-hep.org/x/hep/groot/rbytes"
	"go-hep.org/x/hep/groot/rdict"
	"go-hep.org/x/hep/groot/rhist"
	"go-hep.org/x/hep/groot/rmeta"
	"go-hep.org/x/hep/groot/root"
	"go-hep.org/x/hep/groot/rtypes"
)

type AliDCSSensor struct {
	base0      rbase.Named   // base class
	fId        int32         // Internal number of sensor id  (array index)
	fIdDCS     int32         // ID number in DCS
	fStringID  string        // Amanda String ID
	fStartTime uint32        // start time for DCS map/fit
	fEndTime   uint32        // end time for DCS map/fit
	fGraph     rhist.Graph   // graph with values
	fFit       *AliSplineFit // fit to graph values
	fX         float64       // X-position of the sensor
	fY         float64       // Y-position of the sensor
	fZ         float64       // Z-position of the sensor
}

func (*AliDCSSensor) Class() string   { return "AliDCSSensor" }
func (*AliDCSSensor) RVersion() int16 { return 3 }

// MarshalROOT implements rbytes.Marshaler
func (o *AliDCSSensor) MarshalROOT(w *rbytes.WBuffer) (int, error) {
	if w.Err() != nil {
		return 0, w.Err()
	}

	pos := w.WriteVersion(o.RVersion())

	o.base0.MarshalROOT(w)
	w.WriteI32(o.fId)
	w.WriteI32(o.fIdDCS)
	w.WriteString(o.fStringID)
	w.WriteU32(o.fStartTime)
	w.WriteU32(o.fEndTime)
	w.WriteObjectAny(o.fGraph) // obj-ptr
	w.WriteObjectAny(o.fFit)   // obj-ptr
	w.WriteF64(o.fX)
	w.WriteF64(o.fY)
	w.WriteF64(o.fZ)

	return w.SetByteCount(pos, o.Class())
}

// UnmarshalROOT implements rbytes.Unmarshaler
func (o *AliDCSSensor) UnmarshalROOT(r *rbytes.RBuffer) error {
	if r.Err() != nil {
		return r.Err()
	}

	start := r.Pos()
	/*vers*/ _, pos, bcnt := r.ReadVersion(o.Class())

	o.base0.UnmarshalROOT(r)
	o.fId = r.ReadI32()
	o.fIdDCS = r.ReadI32()
	o.fStringID = r.ReadString()
	o.fStartTime = r.ReadU32()
	o.fEndTime = r.ReadU32()
	{
		o.fGraph = nil
		if oo := r.ReadObjectAny(); oo != nil { // obj-ptr
			o.fGraph = oo.(rhist.Graph)
		}
	}
	{
		o.fFit = nil
		if oo := r.ReadObjectAny(); oo != nil { // obj-ptr
			o.fFit = oo.(*AliSplineFit)
		}
	}
	o.fX = r.ReadF64()
	o.fY = r.ReadF64()
	o.fZ = r.ReadF64()

	r.CheckByteCount(pos, bcnt, start, o.Class())
	return r.Err()
}

func init() {
	f := func() reflect.Value {
		var o AliDCSSensor
		return reflect.ValueOf(&o)
	}
	rtypes.Factory.Add("AliDCSSensor", f)
}

func init() {
	// Streamer for AliDCSSensor.
	rdict.Streamers.Add(rdict.NewCxxStreamerInfo("AliDCSSensor", 3, 0xd292571e, []rbytes.StreamerElement{
		rdict.NewStreamerBase(rdict.Element{
			Name:   *rbase.NewNamed("TNamed", "The basis for a named object (name, title)"),
			Type:   rmeta.Base,
			Size:   0,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, -541636036, 0, 0, 0},
			Offset: 0,
			EName:  "BASE",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New(), 1),
		&rdict.StreamerBasicType{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fId", "Internal number of sensor id  (array index)"),
			Type:   rmeta.Int,
			Size:   4,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "Int_t",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		&rdict.StreamerBasicType{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fIdDCS", "ID number in DCS"),
			Type:   rmeta.Int,
			Size:   4,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "Int_t",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		&rdict.StreamerString{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fStringID", "Amanda String ID"),
			Type:   rmeta.TString,
			Size:   24,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "TString",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		&rdict.StreamerBasicType{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fStartTime", "start time for DCS map/fit"),
			Type:   rmeta.UInt,
			Size:   4,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "UInt_t",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		&rdict.StreamerBasicType{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fEndTime", "end time for DCS map/fit"),
			Type:   rmeta.UInt,
			Size:   4,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "UInt_t",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		&rdict.StreamerObjectPointer{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fGraph", "graph with values"),
			Type:   rmeta.ObjectP,
			Size:   8,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "TGraph*",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		&rdict.StreamerObjectPointer{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fFit", "fit to graph values"),
			Type:   rmeta.ObjectP,
			Size:   8,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "AliSplineFit*",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		&rdict.StreamerBasicType{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fX", "X-position of the sensor"),
			Type:   rmeta.Double,
			Size:   8,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "Double_t",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		&rdict.StreamerBasicType{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fY", "Y-position of the sensor"),
			Type:   rmeta.Double,
			Size:   8,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "Double_t",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
		&rdict.StreamerBasicType{StreamerElement: rdict.Element{
			Name:   *rbase.NewNamed("fZ", "Z-position of the sensor"),
			Type:   rmeta.Double,
			Size:   8,
			ArrLen: 0,
			ArrDim: 0,
			MaxIdx: [5]int32{0, 0, 0, 0, 0},
			Offset: 0,
			EName:  "Double_t",
			XMin:   0.000000,
			XMax:   0.000000,
			Factor: 0.000000,
		}.New()},
	}))
}

var (
	_ root.Object        = (*AliDCSSensor)(nil)
	_ rbytes.RVersioner  = (*AliDCSSensor)(nil)
	_ rbytes.Marshaler   = (*AliDCSSensor)(nil)
	_ rbytes.Unmarshaler = (*AliDCSSensor)(nil)
)
